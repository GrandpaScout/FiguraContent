{"script":"\nif client.isHost() then\n  local loadSecrets = true --Disable this if the REPL is slow to load.\n  --[[>======================================<< INFO >>======================================<[]--\n      FIGURA REPL\n      By: GrandpaScout [STEAM_1:0:55009667]\n      Version: 4.2.0\n      Compatibility: >= Figura 0.0.8\n      Description:\n        A REPL for use in Figura 0.0.8 or later.\n        Contains formatting for types, table printing, hover data, and many other tools.\n        It is also themeable!\n  --[]>====================================<< END INFO >>====================================<]]--\n\n  --Create a completely seperated string table.\n  local string = {}\n  for k,v in pairs(_G.string) do\n    string[k] = v\n  end\n\n  local function checkSMT()\n    return pcall(function()\n      ---@diagnostic disable: unused-local, discard-returns, empty-block\n      local str, str2 = \"%s\", \"I\"\n      str:byte(1,3) str:find(\"h\", 1, true) str:format(\"hello\")\n      str:gsub(\"h\", \"i\", 2) str:len() str:lower() str:match(\"h\", 2)\n      str:rep(5, \"//\") str:reverse() str:sub(1, 4) str:upper()\n      for _ in str:gmatch(\"h\") do end\n      ---@diagnostic enable: unused-local, discard-returns, empty-block\n    end)\n  end\n  --The REPL *requires* a functional string metatable.\n  --This will replace a missing one with a substitute.\n  if not checkSMT() then\n    local t = {}\n    for k,f in pairs(string) do t[k] = f end\n    getmetatable(\"\").__index = t\n  end\n\n  ---@type any #Shut up type hints for this value.\n  local Infinity = math.huge --An infinite value, for convenience.\n  --[=========================================[ CONFIG ]=========================================]--\n\n  local repl_theme = {\n    repl = { --Generic REPL text\n      --[[Normal text.    | color  ]] default     = \"white\",\n      --[[INPUT:          | color  ]] input       = \"white\",\n      --[[RETURNS:        | color  ]] returns     = \"white\",\n      --[[REPL: Notice    | color  ]] notice      = \"white\",\n      --[[REPL: Error     | color  ]] error       = \"red\",\n      --[[return          | color  ]] repl_return = \"light_purple\",\n      --[[User Code.      | color  ]] user_input  = \"white\",\n    },\n    any = { -- Any values\n      --[[Prop:           | color  ]] h_property  = \"dark_gray\",\n      --[[Metatable: {}   | number ]] meta_len    = 16\n    },\n    null = { -- Nil values\n      --[[nil             | color  ]] default     = \"gray\",\n      --[[(no value?)     | color  ]] no_value    = \"dark_gray\"\n    },\n    boolean = { -- Booleans\n      --[[true false      | color  ]] default     = \"yellow\",\n      --[[true color      | color  ]] t           = \"dark_green\",\n      --[[false color     | color  ]] f           = \"dark_red\",\n      --[[true symbol     | string ]] true_char   = \"☑\",\n      --[[false symbol    | string ]] false_char  = \"☒\"\n    },\n    number = { -- Numbers\n      --[[123             | color  ]] default     = \"blue\",\n      --[[(0x7B)          | color  ]] hex         = \"dark_blue\",\n      --[[0b10            | color  ]] bin         = \"dark_blue\",\n      --[[0o71            | color  ]] oct         = \"dark_blue\",\n      --[[0x, 0X, #, etc. | string ]] hex_prefix  = \"0x\",\n      --[[0b, 0B, etc.    | string ]] bin_prefix  = \"0b\",\n      --[[0o, 0O, 0, etc. | string ]] oct_prefix  = \"0o\"\n    },\n    string = { -- Strings\n      --[[\"abc\"           | color  ]] default     = \"red\",\n      --[[\\r\\n§           | color  ]] escaped     = \"dark_red\",\n      --[[\\               | color  ]] slash       = \"dark_gray\",\n      --[[(# bytes)       | color  ]] bytes       = \"dark_red\",\n      --[[# characters    | color  ]] characters  = \"dark_red\",\n      --[[...             | color  ]] len_limit   = \"gray\",\n      --[[= \"hello wo...\" | number ]] value_size  = 256,\n      --[[\"hello worl...\" | number ]] max_size    = Infinity,\n      --[[\"Hover Da...\"   | number ]] max_h_size  = 4096,\n      --[[\\0 -> ∅         | boolean]] use_symbols = true\n    },\n    table = { -- Tables\n      --[[table: 1234abcd | color  ]] default     = \"aqua\",\n      --[[(# indexes)     | color  ]] indexes     = \"dark_aqua\",\n      --[[{ }             | color  ]] bracket     = \"dark_gray\",\n      --[[[ ]             | color  ]] key_bracket = \"dark_gray\",\n      --[[=               | color  ]] equals      = \"dark_gray\",\n      --[[ · · · (# more) | color  ]] line_limit  = \"gray\",\n      --[[<ROOT>          | color  ]] root        = \"white\",\n      --[[<DUPE>          | color  ]] duplicate   = \"aqua\",\n      --[[[\"string\"] =    | number ]] skey_len    = 16,\n      --[[max table depth | number ]] max_indent  = 1,\n      --[[max table len   | number ]] max_length  = Infinity,\n      --[[ · · · }        | number ]] more_len    = 48,\n      --[[Contents: {}    | number ]] content_len = 32\n    },\n    func = { -- Functions\n      --[[function:       | color  ]] default     = \"light_purple\",\n      --[[avatar          | color  ]] script      = \"dark_purple\",\n      --[[:123-167        | color  ]] lines       = \"dark_gray\",\n      --[[builtin:        | color  ]] builtin     = \"dark_gray\",\n      --[[figura:         | color  ]] figura      = \"dark_gray\",\n      --[[unknown:        | color  ]] unknown     = \"dark_gray\",\n      --[[(# bytes)       | color  ]] bytes       = \"dark_purple\",\n      --[[Lua             | color  ]] lua         = \"blue\",\n      --[[(JAVA)          | color  ]] java        = \"gold\"\n    },\n    userdata = {\n      --[[userdata:       | color  ]] default     = \"gray\",\n      --[[1 stick         | color  ]] value       = \"gray\"\n    },\n    thread = { -- Threads\n      --[[thread: 1234abc | color  ]] default     = \"green\",\n      --[[(status)        | color  ]] parentheses = \"dark_green\",\n      --[[Running         | color  ]] running     = \"green\",\n      --[[Suspended       | color  ]] suspended   = \"gold\",\n      --[[Normal          | color  ]] normal      = \"dark_aqua\",\n      --[[Dead            | color  ]] dead        = \"dark_red\"\n    },\n    vector = { -- Vectors\n      --[[1.23            | color  ]] default     = \"white\",\n      --[[< >             | color  ]] bracket     = \"dark_gray\",\n      --[[,               | color  ]] seperator   = \"dark_gray\",\n      --[[(#/6 indexes)   | color  ]] indexes     = \"gray\",\n      --[[123.45          | color  ]] length      = \"gray\",\n    },\n    other = { -- Unknown types.\n      --[[stringified val | color  ]] default     = \"white\",\n      --[[(type)          | color  ]] type        = \"gray\"\n    }\n  }\n  --[=======================================[ END CONFIG ]=======================================]--\n\n  local replcatmt = {\n    __metatable = false,\n    __newindex = function(self, key, value)\n      assert(self[key] ~= nil, \"cannot change non-existent Theme Setting\")\n      if type(value) == \"string\" then\n        rawset(self, key, value:gsub(\"([\\\\\\\"])\", \"\\\\%1\"))\n      else\n        rawset(self, key, value)\n      end\n    end,\n    __index = {\n      NewSetting = function(self, name, value)\n        if self[name] ~= nil then\n          rawset(self, name, value or false)\n        end\n      end\n    }\n  }\n\n  for _,c in pairs(repl_theme) do\n    setmetatable(c, replcatmt)\n  end\n\n  setmetatable(repl_theme, {\n    __metatable = false,\n    __newindex = function(self, key)\n      if not self[key] then\n        error(\"cannot add new Theme Setting category\")\n      else\n        error(\"cannot replace Theme Setting category\")\n      end\n    end,\n    __index = {\n      NewCategory = function(self, name)\n        if not self[name] then\n          rawset(self, name, setmetatable({}, replcatmt))\n        end\n      end\n    }\n  })\n\n  local\n    rtr, rta, rtx,\n    rtb, rtn, rts,\n    rtt, rtf, rtu,\n    rtc, rtv, rto\n      =\n    repl_theme.repl, repl_theme.any, repl_theme.null,\n    repl_theme.boolean, repl_theme.number, repl_theme.string,\n    repl_theme.table, repl_theme.func, repl_theme.userdata,\n    repl_theme.thread, repl_theme.vector, repl_theme.other\n\n  local strrep = {\n    all    = '([\\0\\a\\b\\f\\n\\r\\t\\v\\\\\"])', --∅♪←⊻↓⏮⇄⇵\n    [\"\\0\"] = {\"0\", \"∅\"},\n    [\"\\a\"] = {\"a\", \"♪\"},\n    [\"\\b\"] = {\"b\", \"←\"},\n    [\"\\f\"] = {\"f\", \"⊻\"},\n    [\"\\n\"] = {\"n\", \"↓\"},\n    [\"\\r\"] = {\"r\", \"⏮\"},\n    [\"\\t\"] = {\"t\", \"⇄\"},\n    [\"\\v\"] = {\"v\", \"⇵\"},\n    [\"\\\\\"] = {\"\\\\\\\\\", \"\\\\\\\\\"},\n    [\"\\\"\"] = {'\\\\\"', '\\\\\"'}\n  }\n\n  function strrep.toStr(x)\n    return ('\",{\"text\":\"\\\\\\\\\",\"color\":\"%s\"},{\"text\":\"%s\",\"color\":\"%s\"},\"'):format(\n      rts.slash,\n      strrep[x][1],\n      rts.escaped\n    )\n  end\n\n  function strrep.toSym(x)\n    return ('\",{\"text\":\"%s\",\"color\":\"%s\"},\"'):format(\n      strrep[x][2],\n      rts.escaped\n    )\n  end\n\n  local keyrank = {\n    boolean = 0, number = 1, string = 2, table = 3,\n    [\"function\"] = 4, thread = 5, vector = 6, userdata = 7, other = 99\n  }\n\n  local function tblsort(a, b)\n    local ar, br = keyrank[type(a)] or keyrank.other, keyrank[type(b)] or keyrank.other\n    if ar == br then\n      if ar == 1 then\n        return a < b\n      else\n        return tostring(a) < tostring(b)\n      end\n    else\n      return ar < br\n    end\n  end\n\n  local figuraFIDs = {\n    PingFunction = true\n  }\n\n  H = {}\n  local H = H\n  setmetatable(H, {\n    __pow = function(self, ind)\n      if self ~= H then\n        error(\"index from the right side of the history list\")\n      elseif type(ind) ~= \"number\" then\n        error(\"quick-history only works with a number\")\n      else\n        local x,y = tostring(ind):match(\"^(%-?%d*)%.?(%d-)$\")\n        x,y = tonumber(x) or 1, tonumber(y)\n        local res = self[x == 0 and 1 or #self-x+1]\n        return res and (y and res[y] or res) or nil\n      end\n    end\n  })\n\n  O = {}\n  local O = O\n  local Otypes = {number = true, [\"function\"] = true, table = true, userdata = true, thread = true, vector = true}\n  local Omt = {\n    __type = \"PointersList\",\n    __index = {\n      N = {},\n      Nindex = {}\n    }\n  }\n  local Oindex, OindexN, OindexNi = Omt.__index, Omt.__index.N, Omt.__index.Nindex\n  function Omt:__newindex(key)\n    local t = type(key)\n    if Otypes[t] then\n      if t == \"number\" then\n        if not OindexNi[key] then\n          OindexN[#Oindex.N+1] = key\n          OindexNi[key] = #Oindex.N\n        end\n      elseif not Oindex[key] then\n        Oindex[#Oindex+1] = key\n        Oindex[key] = #Oindex\n      end\n    end\n  end\n  function Omt:__len() return #Oindex end\n  setmetatable(O, Omt)\n\n  local JSON = {} do\n    local function PointersListHover(x, hasContents)\n      local xmt = getmetatable(x).__index\n      local str = ('{\"text\":\"PointerList\",\"color\":\"%s\"},{\"text\":\" (table)\\n\",\"color\":\"%s\"},[{\"text\":\"Pointers: \",\"color\":\"%s\"},{\"text\":\"%d\",\"color\":\"%s\"}'):format(\n        rtt.default,\n        rtt.indexes,\n        rta.h_property,\n        #xmt, rtt.indexes\n      )\n      if not hasContents then\n        str = str .. ',\"\\n\\nContents: \"' .. JSON.stringify.custom.PointersList(x, true, true, {\n          length = rtt.content_len, indent = \"single\"\n        })\n      end\n      return ('{\"action\":\"show_text\",\"value\":[%s]]}'):format(str)\n    end\n\n    local function PointersListMoreHover(x, tbl, i)\n      local strs = {\n        ('{\"text\":\"    · · ·\",\"color\":\"%s\"}'):format(rtt.line_limit)\n      }\n      for j = i+1, #tbl do\n        local v = x[j]\n        strs[#strs+1] = (',\"\\n  \"%s,{\"text\":\" = \",\"color\":\"%s\"}%s'):format(\n          JSON.stringify.number(j, false, true),\n          rtt.equals,\n          JSON.stringify.any(v, true, true, {indent = false})\n        )\n        if j >= (i+rtt.more_len) and j ~= #tbl then\n          strs[#strs+1] = (',{\"text\":\"\\n    · · ·  (%d more)\",\"color\":\"%s\"}'):format(\n            #tbl - j, rtt.line_limit\n          )\n          break\n        end\n      end\n      return ('{\"action\":\"show_text\",\"value\":[%s,{\"text\":\"\\n]\",\"color\":\"%s\"}]}'):format(\n        table.concat(strs), rtt.bracket\n      )\n    end\n\n    local function HistoryHover(x, hasContents)\n      --Not yet.\n    end\n\n    JSON.stringify = {\n      ---@type table<string, fun(x: table, detail: boolean, inHover: boolean, options: {indent?:number|\"false\", DONE?: table, length?: number, max?: boolean}): string>\n      custom={\n        ---@param x table\n        ---@param detail? string\n        ---@param inHover? boolean\n        ---@param options? {indent?:number|\"false\", DONE?: table, length?: number, max?: boolean}\n        PointersList = function(x, detail, inHover, options)\n          local xmt = getmetatable(x).__index\n          local indent\n          options = options or {}\n          if options.indent == false then\n            indent = rtt.max_indent + 1\n          else\n            indent = tonumber(options.indent) and math.max(options.indent, 0) or 1\n          end\n          local contents = indent <= rtt.max_indent\n          local str = (',[{\"text\":\"PointerList: %s\",\"color\":\"%s\"%s}'):format(\n            tostring(x):match(\"^table: (%x%x?%x?%x?%x?%x?%x?%x?)$\") or \"???\",\n            rtt.default,\n            not inHover and (',\"insertion\":\"O\",\"hoverEvent\":' .. PointersListHover(x, contents)) or \"\"\n          )\n          if contents then str = str .. (',[{\"text\":\" [\",\"color\":\"%s\"}'):format(rtt.bracket) end\n          if detail then\n            str = str .. (',{\"text\":\" (%d pointers)\",\"color\":\"%s\"}'):format(\n              #xmt, rtt.indexes\n            )\n          end\n          if contents then\n            local strs = {}\n            for i,v in ipairs(xmt) do\n              strs[#strs+1] = (',\"\\n%s\"%s,{\"text\":\" = \",\"color\":\"%s\"}%s'):format(\n                (\"  \"):rep(indent),\n                JSON.stringify.number(i, false, inHover),\n                rtt.equals,\n                JSON.stringify.any(v, true, inHover, {indent = false})\n              )\n              if options.length and (i >= options.length) and ((#xmt - i) ~= 0) then\n                if inHover then\n                  strs[#strs+1] = (',{\"text\":\"\\n%s  · · ·  (%d more)\",\"color\":\"%s\"}'):format(\n                    (\"  \"):rep(indent), #xmt - i, rtt.line_limit\n                  )\n                else\n                  strs[#strs+1] = (',{\"text\":\"\\n%s  · · ·  (%d more)\",\"color\":\"%s\",\"hoverEvent\":%s}'):format(\n                    (\"  \"):rep(indent), #xmt - i, rtt.line_limit, PointersListMoreHover(x, Oindex, i)\n                  )\n                end\n                break\n              end\n            end\n            str = str .. ('%s,\"\\n%s]\"]'):format(\n              table.concat(strs), (\"  \"):rep(math.max(indent-1, 0))\n            )\n          end\n          return str .. \"]\"\n        end\n      },\n\n      ---@param x any\n      ---@param detail? string\n      ---@param inHover? boolean\n      ---@param options? {indent?:number|\"false\", DONE?: table, length?: number, max?: boolean}\n      ---@return string\n      any = function(x, detail, inHover, options)\n        options = options or {}\n        local t = type(x)\n        if t == \"string\" then\n          return JSON.stringify.string(x, detail, inHover, options.length)\n        elseif t == \"table\" then\n          local mt = getmetatable(x)\n          local mtt = type(mt) == \"table\" and mt.__type or nil\n          if mtt and JSON.stringify.custom[mtt] then\n            return JSON.stringify.custom[mtt](x, detail, inHover, options)\n          else\n            return JSON.stringify.table(x, detail, inHover, options.indent, options.length, options.DONE)\n          end\n        elseif t == \"vector\" then\n          return JSON.stringify.vector(x, detail, inHover, options.max)\n        else\n          return (JSON.stringify[t] or JSON.stringify.other)(x, detail, inHover)\n        end\n      end,\n      ---@param inHover? boolean\n      ---@return string\n      [\"nil\"] = function(_, _, inHover)\n        return (',{\"text\":\"nil\",\"color\":\"%s\"%s}'):format(\n          rtx.default,\n          not inHover and (',\"insertion\":\"nil\",\"hoverEvent\":%s'):format(JSON.hoverData[\"nil\"]()) or \"\"\n        )\n      end,\n      ---@param x boolean\n      ---@param detail? boolean\n      ---@param inHover? boolean\n      ---@return string\n      boolean = function(x, detail, inHover)\n        local str = (',[{\"text\":\"%s\",\"color\":\"%s\"%s}'):format(\n          tostring(x), rtb.default,\n          not inHover and (',\"insertion\":\"%s\",\"hoverEvent\":%s'):format(\n            tostring(x), JSON.hoverData.boolean(x)\n          ) or \"\"\n        )\n        if detail then\n          str = str .. (',{\"text\":\" %s\",\"color\":\"%s\"}'):format(\n            x and rtb.true_char or rtb.false_char,\n            x and rtb.t or rtb.f\n          )\n        end\n        return str .. \"]\"\n      end,\n      ---@param x number\n      ---@param detail? boolean\n      ---@param inHover? boolean\n      ---@return string\n      number = function(x, detail, inHover)\n        local unsafenum = tonumber(tostring(x)) ~= x\n        local insert = x\n        if unsafenum and not O.Nindex[x] then\n          O[x] = true\n          if not inHover then insert = \"O.N[\" .. O.Nindex[x] .. \"]\" end\n        end\n        local str = (',[{\"text\":\"%s\",\"color\":\"%s\"%s}'):format(\n          tostring(x), rtn.default,\n          not inHover and (',\"insertion\":\"%s\",\"hoverEvent\":%s'):format(\n            insert, JSON.hoverData.number(x)\n          ) or \"\"\n        )\n        if detail then\n          local ax = math.abs(x)\n          if math.floor(x) == x and ax <= 0x7FFFFFFFFFFFFFFF then\n            str = str .. (',{\"text\":\" (%s%s%X)\",\"color\":\"%s\"}'):format(\n              (x < 0 and \"-\" or \"\"), rtn.hex_prefix, ax, rtn.hex\n            )\n          end\n        end\n        return str .. \"]\"\n      end,\n      ---@param x string\n      ---@param detail? boolean\n      ---@param inHover? boolean\n      ---@param length? number\n      ---@return string\n      string = function(x, detail, inHover, length)\n        length = tonumber(length)\n        local xstr\n        if not length or (length <= 0) or (length >= #x) then\n          xstr = x\n          length = false\n        else\n          xstr = x:sub(1, length-4)\n        end\n\n        local firstmatch = xstr:find(strrep.all) or xstr:find(\"§\")\n        local str\n        if firstmatch then\n          str = xstr\n            :gsub(\n              strrep.all,\n              rts.use_symbols and strrep.toSym or strrep.toStr\n            )\n            :gsub(\n              \"§(.)\",\n              ('\",{\"text\":\"ƒ\",\"color\":\"%s\"},\"§%%1%%1§r'):format(rts.escaped)\n            )\n          str = (',[{\"text\":\"\\\\\"%s\",\"color\":\"%s\"%s}'):format(\n            str:sub(1, firstmatch-1), rts.default,\n            not inHover and (',\"insertion\":\"\\\\\"%s\\\\\"\",\"hoverEvent\":%s'):format(\n              x\n                :gsub(strrep.all, function(c) return \"\\\\\\\\\" .. strrep[c][1] end)\n                :gsub(\"§\", \"\\\\\\\\xC2\\\\\\\\xA7\")\n                :gsub(\"([\\1\\2\\3\\4\\5\\6\\14\\15\\16\\17\\18\\19\\20\\21\\22\\23\\24\\25\\26\\27\\28\\29\\30\\31\\127])\", function(c) return \"\\\\\\\\\" .. string.byte(c) end),\n              JSON.hoverData.string(x)\n            ) or \"\"\n          ) .. str:sub(firstmatch+1)\n          if str:find(',\"$') then\n            str = str:sub(1, -3) .. (length and (',{\"text\":\" · · · \",\"color\":\"%s\"},\"\\\\\"\"'):format(rts.len_limit) or ',\"\\\\\"\"')\n          else\n            str = str .. (length and ('\",{\"text\":\" · · · \",\"color\":\"%s\"},\"\\\\\"\"'):format(rts.len_limit) or '\\\\\"\"')\n          end\n        else\n          str = (',[{\"text\":\"\\\\\"%s\",\"color\":\"%s\"%s}%s,\"\\\\\"\"'):format(\n            xstr, rts.default,\n            not inHover and (',\"insertion\":\"\\\\\"%s\\\\\"\",\"hoverEvent\":%s'):format(\n              x\n                :gsub(strrep.all, function(c) return \"\\\\\\\\\" .. strrep[c][1] end)\n                :gsub(\"§\", \"\\\\\\\\xC2\\\\\\\\xA7\")\n                :gsub(\"([\\1\\2\\3\\4\\5\\6\\14\\15\\16\\17\\18\\19\\20\\21\\22\\23\\24\\25\\26\\27\\28\\29\\30\\31\\127])\", function(c) return \"\\\\\\\\\" .. string.byte(c) end),\n              JSON.hoverData.string(x)\n            ) or \"\",\n            length and (',{\"text\":\" · · · \",\"color\":\"%s\"}'):format(rts.len_limit) or \"\"\n          )\n        end\n        if detail then\n          str = str .. (',{\"text\":\" (%d byte%s)\",\"color\":\"%s\"}'):format(\n            #x, #x ~= 1 and \"s\" or \"\", rts.bytes\n          )\n        end\n        return str .. \"]\"\n      end,\n      ---@param x table\n      ---@param detail? boolean\n      ---@param inHover? boolean\n      ---@param indent? \"false\"|number|'\"single\"'\n      ---@param length? number\n      ---@param DONE? table\n      ---@return string\n      table = function(x, detail, inHover, indent, length, DONE)\n        local noindent\n        if indent == false then\n          indent = rtt.max_indent + 1\n        elseif indent == \"single\" then\n          noindent = true\n          indent = 1\n        end\n        indent = indent == nil and 1 or math.max(indent, 0)\n        if not O[x] then O[x] = true end\n        local insert = \"O[\" .. O[x] .. \"]\"\n        local contents = indent <= rtt.max_indent\n        local xlen = 0\n        if not inHover or detail then\n          for _ in pairs(x) do --Iterate the table for *every* key to get the real size.\n            xlen = xlen + 1\n          end\n          if xlen == 0 then --If a table cannot be iterated, try getting the length. If that fails, use 0.\n            local s, r = pcall(function() return #x end)\n            xlen = s and tonumber(r) or 0\n          end\n        end\n        local str = (',[{\"text\":\"%s\",\"color\":\"%s\"%s}'):format(\n          tostring(x), rtt.default,\n          not inHover and (',\"insertion\":\"%s\",\"hoverEvent\":%s'):format(\n            insert, JSON.hoverData.table(x, contents, xlen)\n          ) or \"\"\n        )\n        if contents then str = str .. (',{\"text\":\" {\",\"color\":\"%s\"}'):format(rtt.bracket) end\n        if detail then\n          str = str .. (',{\"text\":\" (%d index%s)\",\"color\":\"%s\"}'):format(\n            xlen, xlen ~= 1 and \"es\" or \"\", rtt.indexes\n          )\n        end\n        if contents and next(x) == nil then\n          str = str .. (',{\"text\":\"%s}\",\"color\":\"%s\"}'):format(\n            detail and \" \" or \"\",\n            rtt.bracket\n          )\n          contents = false\n        end\n        str = str .. \"]\"\n        if not DONE then --DONE handles recursion.\n          DONE = {}\n          DONE.root = x\n          DONE[x] = true\n        elseif DONE.root == x then\n          str = str .. (',{\"text\":\" <ROOT>\",\"color\":\"%s\"}'):format(rtt.root)\n        elseif DONE[x] then\n          str = str .. (',{\"text\":\" <DUPE>\",\"color\":\"%s\"}'):format(rtt.duplicate)\n        else\n          DONE[x] = true\n        end\n        if contents then\n          local keys = {}\n          for k in pairs(x) do --Get all keys and sort them.\n            keys[#keys+1] = k\n          end\n          table.sort(keys, tblsort)\n\n          local strs = {}\n          for i,k in ipairs(keys) do\n            local v = x[k]\n            strs[#strs+1] = (',[{\"text\":\"\\n%s[\",\"color\":\"%s\"}%s,\"]\"],{\"text\":\" = \",\"color\":\"%s\"}%s'):format(\n              noindent and \"  \" or (\" \"):rep(indent*2), rtt.key_bracket,\n              JSON.stringify.any(k, false, inHover, {\n                length = rtt.skey_len, indent = false, max = false\n              }),\n              rtt.equals,\n              JSON.stringify.any(v, true, inHover, {\n                indent = ((not DONE[v] and not noindent) and (indent + 1) or false),\n                length = type(v) == \"string\" and rts.value_size or rtt.max_length,\n                DONE = DONE\n              })\n            )\n            if length and (i >= length) and (#keys > i) then --If the line limit is hit, stop the table early.\n              if inHover then\n                strs[#strs+1] = (',{\"text\":\"\\n%s  · · ·  (%d more)\",\"color\":\"%s\"}'):format(\n                  (\"  \"):rep(indent), #keys - i, rtt.line_limit\n                )\n              else\n                strs[#strs+1] = (',{\"text\":\"\\n%s  · · ·  (%d more)\",\"color\":\"%s\",\"hoverEvent\":%s}'):format(\n                  (\"  \"):rep(indent), #keys - i, rtt.line_limit, JSON.hoverData.tableMore(x, keys, i)\n                )\n              end\n              break\n            end\n          end\n          str = str .. ('%s,{\"text\":\"\\n%s}\",\"color\":\"%s\"}'):format(\n            table.concat(strs), (\"  \"):rep(math.max(indent-1, 0)), rtt.bracket\n          )\n        end\n        return str\n      end,\n      ---@param x function\n      ---@param detail? boolean\n      ---@param inHover? boolean\n      ---@return string\n      [\"function\"] = function(x, detail, inHover)\n        local s, dump = pcall(string.dump, x)\n        local insert\n        if not inHover then\n          if not O[x] then O[x] = true end\n          insert = \"O[\" .. O[x] .. \"]\"\n        end\n        local str\n        if s then\n          local fname, flines = tostring(x):match(\"^function: ([^:]+)(:%d+%-%d+)$\")\n          str = (',[{\"text\":\"function:\",\"color\":\"%s\"%s},{\"text\":\" %s\",\"color\":\"%s\"},{\"text\":\"%s\",\"color\":\"%s\"}'):format(\n            rtf.default,\n            not inHover and (',\"insertion\":\"%s\",\"hoverEvent\":%s'):format(\n              insert, JSON.hoverData[\"function\"](x, #dump)\n            ) or \"\",\n            fname:gsub(\"([\\\\\\\"])\", \"\\\\%1\"), rtf.script,\n            flines, rtf.lines\n          )\n        else\n          local fid = tostring(x):match(\" ?([%w_]+)$\")\n          local ftype = fid and (\n            (tonumber(fid) or figuraFIDs[fid]) and \"figura\" or \"builtin\"\n          ) or \"unknown\"\n          str = (',[{\"text\":\"\"%s},[{\"text\":\"function: \",\"color\":\"%s\"},{\"text\":\"%s:\",\"color\":\"%s\"},\"%s\"]'):format(\n            not inHover and (',\"insertion\":\"%s\",\"hoverEvent\":%s'):format(\n              insert, JSON.hoverData[\"function\"](x)\n            ) or \"\",\n            rtf.default,\n            ftype, rtf[ftype],\n            (fid or \"<NAME ERROR>\"):gsub(\"([\\\\\\\"])\", \"\\\\%1\")\n          )\n        end\n        if detail then\n          if s then\n            str = str .. (',{\"text\":\" (%d byte%s)\",\"color\":\"%s\"}'):format(\n              #dump, #dump ~= 1 and \"s\" or \"\", rtf.bytes\n            )\n          else\n            str = str .. (',{\"text\":\" (JAVA)\",\"color\":\"%s\"}'):format(rtf.java)\n          end\n        end\n        return str .. \"]\"\n      end,\n      ---@param x userdata\n      ---@param inHover? boolean\n      ---@return string\n      userdata = function(x, _, inHover)\n        local ustr = tostring(x):gsub(\"([\\\\\\\"])\", \"\\\\%1\")\n        local insert\n        if not inHover then\n          if not O[x] then O[x] = true end\n          insert = \"O[\" .. O[x] .. \"]\"\n        end\n        if ustr:match(\"^userdata: \") then\n          ustr = ustr:sub(11)\n        end\n        return (',[{\"text\":\"userdata: \",\"color\":\"%s\"%s},{\"text\":\"%s\",\"color\":\"%s\"}]'):format(\n          rtu.default,\n          not inHover and (',\"insertion\":\"%s\",\"hoverEvent\":%s'):format(\n            insert, JSON.hoverData.userdata(x)\n          ) or \"\",\n          ustr, rtu.value\n        )\n      end,\n      ---@param x thread\n      ---@param detail? boolean\n      ---@param inHover? boolean\n      ---@return string\n      thread = function(x, detail, inHover)\n        local insert\n        local status\n        if detail or not inHover then status = coroutine.status(x) end\n        if not inHover then\n          if not O[x] then O[x] = true end\n          insert = \"O[\" .. O[x] .. \"]\"\n        end\n        local str = (',[{\"text\":\"%s\",\"color\":\"%s\"%s}'):format(\n          tostring(x), rtc.default,\n          not inHover and (',\"insertion\":\"%s\",\"hoverEvent\":%s'):format(\n            insert, JSON.hoverData.thread(x, status)\n          ) or \"\"\n        )\n        if detail then\n          str = str .. (',[{\"text\":\" (\",\"color\":\"%s\"},{\"text\":\"%s\",\"color\":\"%s\"},\")\"]'):format(\n            rtc.parentheses,\n            status:gsub(\"^.\", string.upper), rtc[status]\n          )\n        end\n        return str .. \"]\"\n      end,\n      ---@param x Vector\n      ---@param detail? boolean\n      ---@param inHover? boolean\n      ---@param max? boolean\n      ---@return string\n      vector = function(x, detail, inHover, max)\n        max = max == nil or max\n        local insert\n        if not inHover then\n          if not O[x] then O[x] = true end\n          insert = \"O[\" .. O[x] .. \"]\"\n        end\n        local i = 1\n        for j=6,1,-1 do\n          if x[j] ~= 0 then i = j break end\n        end\n\n        local strs = {}\n        if max then\n          for j = 1, i do\n            strs[#strs+1] = (',\"%f\"'):format(x[j])\n          end\n        else\n          for j = 1, i do\n            local fstr = tostring(x[j])\n            local fsub = fstr:sub(1, (fstr:find(\"%..*$\") or #fstr) + 5)\n            strs[#strs+1] = (',\"%s%s\"'):format(\n              fsub, (#fstr > #fsub) and \"...\" or \"\"\n            )\n          end\n        end\n        strs[1] = (',[{\"text\":\"\"%s},[{\"text\":\"<\",\"color\":\"%s\"},[{\"text\":%s,\"color\":\"%s\"}'):format(\n          not inHover and (',\"insertion\":\"%s\",\"hoverEvent\":%s'):format(\n            insert, JSON.hoverData.vector(x)\n          ) or \"\",\n          rtv.bracket,\n          strs[1]:sub(2), rtv.default\n        )\n        strs[#strs] = strs[#strs] .. '],\">\"]'\n\n        local sep = (',{\"text\":\",\",\"color\":\"%s\"}'):format(rtv.seperator)\n        local str = table.concat(strs, sep)\n\n        if detail then\n          str = str .. (',{\"text\":\" (%d/6 indexes)\",\"color\":\"%s\"}'):format(\n            i, rtv.indexes\n          )\n        end\n        return str .. \"]\"\n      end,\n      ---@param x any\n      ---@param detail? boolean\n      ---@param inHover? boolean\n      ---@return string\n      other = function(x, detail, inHover)\n        local str = (',[{\"text\":\"%s\",\"color\":\"%s\"%s}'):format(\n          tostring(x):gsub(\"([\\\\\\\"])\", \"\\\\%1\"), rto.default,\n          not inHover and (',\"hoverEvent\":' .. JSON.hoverData.other(x)) or \"\"\n        )\n        if detail then\n          str = str .. (',{\"text\":\" (%s)\",\"color\":\"%s\"}'):format(\n            type(x), rto.type\n          )\n        end\n        return str .. \"]\"\n      end\n    }\n    local o2b = {\n      [\"0\"] = \"000\", [\"1\"] = \"001\", [\"2\"] = \"010\", [\"3\"] = \"011\",\n      [\"4\"] = \"100\", [\"5\"] = \"101\", [\"6\"] = \"110\", [\"7\"] = \"111\"\n    }\n    local vectorObj = {\n      asTable = 1, toDeg = 2, toRad = 3, angleTo = 4, cross = 5, dot = 6, normalized = 7,\n      getLength = 8, distanceTo = 9\n    }\n    function JSON.stringify.vectorMethods()\n      local str = (',{\"text\":\"table: LuaVector\",\"color\":\"%s\"},{\"text\":\" {\",\"color\":\"%s\"},{\"text\":\" (9 indexes)\",\"color\":\"%s\"}'):format(\n        rtt.default,\n        rtt.bracket,\n        rtt.indexes\n      )\n      local keys = {}\n      for k in pairs(vectorObj) do keys[#keys+1] = k end\n      table.sort(keys)\n      local strs = {}\n      for _, k in ipairs(keys) do\n        local v = vectorObj[k]\n        strs[#strs+1] = (',[{\"text\":\"\\n  [\",\"color\":\"%s\"}%s,\"]\"],{\"text\":\" = \",\"color\":\"%s\"},[{\"text\":\"function: \",\"color\":\"%s\"},{\"text\":\"figura:\",\"color\":\"%s\"},\"%s\"],{\"text\":\" (JAVA)\",\"color\":\"%s\"}'):format(\n          rtt.key_bracket,\n          JSON.stringify.any(k, false, false, {length = rtt.skey_len, indent = false, max = false}),\n          rtt.equals,\n          rtf.default,\n          rtf.figura,\n          v,\n          rtf.java\n        )\n      end\n      return str .. ('%s,{\"text\":\"\\n}\",\"color\":\"%s\"}'):format(\n        table.concat(strs),\n        rtt.bracket\n      )\n    end\n    JSON.hoverData = {\n      [\"nil\"] = function()\n        return ('{\"action\":\"show_text\",\"value\":[{\"text\":\"Nil\\nnil\",\"color\":\"%s\"}]}'):format(rtx.default)\n      end,\n      boolean = function(x)\n        return ('{\"action\":\"show_text\",\"value\":[{\"text\":\"Boolean\\n\",\"color\":\"%s\"},{\"text\":\"%s\",\"color\":\"%s\"}]}'):format(\n          rtb.default,\n          tostring(x),\n          x and rtb.t or rtb.f\n        )\n      end,\n      number = function(x)\n        local str = ('{\"text\":\"Number\\n%s\",\"color\":\"%s\"}'):format(\n          tostring(x),\n          rtn.default\n        )\n        if math.floor(x) == x and math.abs(x) <= 0x7FFFFFFFFFFFFFFF then\n          local sign = x < 0 and \"-\" or \"\"\n          x = math.abs(x)\n          local ostr = (\"%o\"):format(x)\n          str = str .. (',[{\"text\":\"\\nHex: \",\"color\":\"%s\"},{\"text\":\"%s%s%X\\n\",\"color\":\"%s\"},\"Oct: \",{\"text\":\"%s%s%s\\n\",\"color\":\"%s\"},\"Bin: \",{\"text\":\"%s%s%s\",\"color\":\"%s\"}]'):format(\n            rta.h_property,\n            sign, rtn.hex_prefix, x, rtn.hex,\n            sign, rtn.oct_prefix, ostr, rtn.oct,\n            sign, rtn.bin_prefix, ostr:gsub(\".\", o2b):gsub(\"^0+\", \"\", 1), rtn.bin\n          )\n        end\n        return ('{\"action\":\"show_text\",\"value\":[%s]}'):format(str)\n      end,\n      string = function(x)\n        local chars = 0\n        for i = 1, #x do\n          if math.floor(x:byte(i) * 0.015625) ~= 2 then chars = chars + 1 end\n        end\n        local mt = getmetatable(\"\")\n        return ('{\"action\":\"show_text\",\"value\":[{\"text\":\"String\\n\",\"color\":\"%s\"}%s,[{\"text\":\"\\nBytes: \",\"color\":\"%s\"},{\"text\":\"%d\\n\",\"color\":\"%s\"},\"Characters: \",{\"text\":\"%d\\n\\n\",\"color\":\"%s\"},\"Metatable: \"%s]]}'):format(\n          rts.default,\n          JSON.stringify.string(x, false, true, rts.max_h_size),\n          rta.h_property,\n          #x, rts.bytes,\n          chars, rts.characters,\n          JSON.stringify.any(mt, true, true, {\n            indent = \"single\",\n            length = type(mt) == \"string\" and rts.value_size or rta.meta_len\n          })\n        )\n      end,\n      table = function(x, contentVisible, size)\n        local mt = getmetatable(x)\n        local str = ('{\"text\":\"Table\\n%s\\n\",\"color\":\"%s\"},[{\"text\":\"Indexes: \",\"color\":\"%s\"},{\"text\":\"%d\\n\\n\",\"color\":\"%s\"},\"Metatable: \"%s'):format(\n          tostring(x), rtt.default,\n          rta.h_property,\n          size, rtt.indexes,\n          JSON.stringify.any(mt, true, true, {\n            indent = \"single\",\n            length = type(mt) == \"string\" and rts.value_size or rta.meta_len\n          })\n        )\n        if not contentVisible then\n          str = str .. (',\"\\n\\nContents: \"' .. JSON.stringify.table(x, false, true, \"single\", rtt.content_len))\n        end\n        return ('{\"action\":\"show_text\",\"value\":[%s]]}'):format(str)\n      end,\n      tableMore = function(x, keys, i)\n        local strs = {\n          ('{\"text\":\"    · · ·\",\"color\":\"%s\"}'):format(rtt.line_limit)\n        }\n        for j = i+1, #keys do\n          local k = keys[j]\n          local v = x[k]\n          strs[#strs+1] = (',[{\"text\":\"\\n  [\",\"color\":\"%s\"}%s,\"]\"],{\"text\":\" = \",\"color\":\"%s\"}%s'):format(\n            rtt.key_bracket,\n            JSON.stringify.any(k, false, true, {\n              indent = false, length = rtt.skey_len, max = false\n            }),\n            rtt.equals,\n            JSON.stringify.any(v, true, true, {\n              indent = false, length = rts.value_size\n            })\n          )\n          if j >= (i+rtt.more_len) and j ~= #keys then\n            strs[#strs+1] = (',{\"text\":\"\\n    · · ·  (%d more)\",\"color\":\"%s\"}'):format(\n              #keys - j, rtt.line_limit\n            )\n            break\n          end\n        end\n        return ('{\"action\":\"show_text\",\"value\":[%s,{\"text\":\"\\n}\",\"color\":\"%s\"}]}'):format(\n          table.concat(strs), rtt.bracket\n        )\n      end,\n      [\"function\"] = function(x, size)\n        local str = ('{\"text\":\"Function\\n\",\"color\":\"%s\"}%s,[{\"text\":\"\\nSource: \",\"color\":\"%s\"},{\"text\":\"%s\",\"color\":\"%s\"}'):format(\n          rtf.default,\n          JSON.stringify[\"function\"](x, false, true),\n          rta.h_property,\n          size and \"Lua\" or \"Java\", size and rtf.lua or rtf.java\n        )\n        if size then\n          str = str .. (',\"\\nBytes: \",{\"text\":\"%d\",\"color\":\"%s\"}'):format(\n            size, rtf.bytes\n          )\n        end\n        return ('{\"action\":\"show_text\",\"value\":[%s]]}'):format(str)\n      end,\n      userdata = function(x)\n        return ('{\"action\":\"show_text\",\"value\":[{\"text\":\"Userdata\\n\",\"color\":\"%s\"},{\"text\":\"%s\",\"color\":\"%s\"}]}'):format(\n          rtu.default,\n          tostring(x):gsub(\"([\\\\\\\"])\", \"\\\\%1\"), rtu.value\n        )\n      end,\n      thread = function(x, status)\n        return ('{\"action\":\"show_text\",\"value\":[{\"text\":\"Thread\\n%s\\n\",\"color\":\"%s\"},{\"text\":\"Status: \",\"color\":\"%s\"},{\"text\":\"%s\",\"color\":\"%s\"}]'):format(\n          tostring(x), rtc.default,\n          rta.h_property,\n          status, rtc[status]\n        )\n      end,\n      vector = function(x)\n        local str = ('{\"text\":\"Vector\\n\",\"color\":\"%s\"}%s,[{\"text\":\"\\nLength: \",\"color\":\"%s\"},{\"text\":\"%f\\n\",\"color\":\"%s\"}'):format(\n          rtv.default,\n          JSON.stringify.vector(x, false, true, true),\n          rta.h_property,\n          x.getLength(), rtv.length\n        )\n        if\n          (x[1] >= 0 and x[1] <= 1) and\n          (x[2] >= 0 and x[2] <= 1) and\n          (x[3] >= 0 and x[3] <= 1)\n        then\n          local rgb_r,rgb_g,rgb_b = math.floor(x[1]*255), math.floor(x[2]*255), math.floor(x[3]*255)\n          local rgb_hsv = vectors.rgbToHSV(x)\n          local rgb_h,rgb_s,rgb_v = math.floor(rgb_hsv[1]*360)%360, math.floor(rgb_hsv[2]*10000)*0.01, math.floor(rgb_hsv[3]*10000)*0.01\n\n          local hsv_h, hsv_s, hsv_v = math.floor(x[1]*360)%360, math.floor(x[2]*10000)*0.01, math.floor(x[3]*10000)*0.01\n          local hsv_rgb = vectors.hsvToRGB(x)\n          local hsv_r, hsv_g, hsv_b = math.floor(hsv_rgb[1]*255), math.floor(hsv_rgb[2]*255), math.floor(hsv_rgb[3]*255)\n          str = str .. (',\"\\n[RGB]:\\n  Color: \",{\"text\":\"Lorem_Ipsum █ ⏹⏺◆\\n\",\"color\":\"#%06X\"},\"    RGB: \",{\"text\":\"⏺ %d\",\"color\":\"#%02X0000\"},\", \",{\"text\":\"⏺ %d\",\"color\":\"#00%02X00\"},\", \",{\"text\":\"⏺ %d\\n\",\"color\":\"#0000%02X\"},\"    HSV: \",{\"text\":\"⏺ %d°\",\"color\":\"#%06X\"},\", \",{\"text\":\"⏺ %s%%\",\"color\":\"#%06X\"},\", \",{\"text\":\"⏺ %s%%\\n\",\"color\":\"#%06X\"},\"[HSV]:\\n  Color: \",{\"text\":\"Lorem_Ipsum █ ⏹⏺◆\\n\",\"color\":\"#%06X\"},\"    HSV: \",{\"text\":\"⏺ %d°\",\"color\":\"#%06X\"},\", \",{\"text\":\"⏺ %s%%\",\"color\":\"#%06X\"},\", \",{\"text\":\"⏺ %s%%\\n\",\"color\":\"#%06X\"},\"    RGB: \",{\"text\":\"⏺ %d\",\"color\":\"#%02X0000\"},\", \",{\"text\":\"⏺ %d\",\"color\":\"#00%02X00\"},\", \",{\"text\":\"⏺ %d\\n\",\"color\":\"#0000%02X\"}'):format(\n            vectors.rgbToINT(x),\n            rgb_r, rgb_r,\n            rgb_g, rgb_g,\n            rgb_b, rgb_b,\n            rgb_h, vectors.rgbToINT(vectors.hsvToRGB(vectors.of{rgb_hsv[1], 1, 1})),\n            tostring(rgb_s), vectors.rgbToINT(vectors.hsvToRGB(vectors.of{0, rgb_hsv[2], 1})),\n            tostring(rgb_v), vectors.rgbToINT(vectors.hsvToRGB(vectors.of{0, 0, rgb_hsv[3]})),\n\n            vectors.rgbToINT(vectors.hsvToRGB(x)),\n            hsv_h, vectors.rgbToINT(vectors.hsvToRGB(vectors.of{x[1], 1, 1})),\n            tostring(hsv_s), vectors.rgbToINT(vectors.hsvToRGB(vectors.of{0, x[2], 1})),\n            tostring(hsv_v), vectors.rgbToINT(vectors.hsvToRGB(vectors.of{0, 0, x[3]})),\n            hsv_r, hsv_r,\n            hsv_g, hsv_g,\n            hsv_b, hsv_b\n          )\n        end\n\n        return ('{\"action\":\"show_text\",\"value\":[%s,\"\\nMethods: \"%s]]}'):format(\n          str,\n          JSON.stringify.vectorMethods()\n        )\n      end,\n      other = function(x)\n        return ('{\"action\":\"show_text\",\"value\":[{\"text\":\"%s\\n\",\"color\":\"%s\"},{\"text\":\"%s\",\"color\":\"%s\"}]}'):format(\n          ---That's a load of bull, LLS.\n          ---@diagnostic disable-next-line: undefined-field\n          type(x):gsub(\"^.\", string.upper), rto.type,\n          tostring(x):gsub(\"\\\\\\\"\", \"\\\\%1\"), rto.default\n        )\n      end\n    }\n  end\n\n  REPL = {\n    currentcommand = \"\",\n    stringify = JSON.stringify,\n    theme = repl_theme,\n    bound = false,\n    key = keybind.newKey(\"[REPL] Bind to Chat\", \"GRAVE_ACCENT\"),\n    keyWP = false,\n    log = function(x, detail, inHover, options)\n      options = type(options) == \"table\" and options or {}\n      log(('[{\"text\":\"\",\"italic\":false}%s]'):format(\n        JSON.stringify.any(x, detail, inHover, {\n          indent = options.indent, length = options.length, max = options.max\n        })\n      ), true)\n    end,\n    --Not yet...\n    RegisterStringifier = function(name, stringify)\n\n    end\n  }\n  local REPL = REPL\n  local REPLSuperActions = {\n    fixstringmt = {\n      func = function()\n        local t = {}\n        for k,f in pairs(string) do\n          t[k] = f\n        end\n        getmetatable(\"\").__index = t\n        log(\"Set string metatable index to \" .. tostring(t))\n      end,\n      desc = \"Repairs the string metatable.\",\n      help = \"Repairs the string metatable.\\n\" ..\n      \"This is useful if you somehow broke string methods.\\n\" ..\n      \"The string metatable is required to be functional for the REPL to run.\\n\" ..\n      \"Usage:\\n\" ..\n      \"  $$#fixstringmt\"\n    },\n    error = {\n      func = function()\n        error(\"forced critical REPL error.\")\n      end,\n      desc = \"Force a critical error in the REPL.\",\n      help = \"Force a critical error in the REPL.\\n\" ..\n      \"Used to emulate a Lua error in the REPL itself instead of an error with REPL input.\\n\" ..\n      \"Usage:\\n\" ..\n      \"  $$#error\"\n    },\n    avatarerror = {\n      func = function(yes)\n        if yes == \"yes\" then\n          return \"\\0\\9\\0\\70\\79\\82\\67\\69\\0\\9\\0\"\n        else\n          log(\"Please use \\\"$$#avatarerror yes\\\" to confirm.\")\n        end\n      end,\n      desc = \"Force your avatar to error.\",\n      help = \"Force your avatar to error.\\n\" ..\n      \"The only way to reverse this action is to reload the avatar.\\n\" ..\n      \"Usage:\\n\" ..\n      \"  $$#avatarerror - Does nothing.\\n\" ..\n      \"  $$#avatarerror yes - Causes an avatar error.\"\n    },\n    mlcancel = {\n      func = function()\n        if REPL.currentcommand == \"\" then\n          log(\"There is no current Multi-line input!\")\n        else\n          REPL.currentcommand = \"\"\n        end\n      end,\n      desc = \"Cancels the current multi-line input.\",\n      help = \"Cancels the current multi-line input.\\n\" ..\n      \"Useful if you want to cancel an entire chunk of multi-line Lua without causing issues.\\n\" ..\n      \"Usage:\\n\" ..\n      \"  $$#mlcancel\"\n    },\n    mlback = {\n      func = function()\n        local lastline = REPL.currentcommand:find(\"[^\\n]*\\n$\")\n        if lastline then\n          REPL.currentcommand = REPL.currentcommand:sub(1, lastline-1)\n        else\n          log(\"There is no current Multi-line input!\")\n        end\n      end,\n      desc = \"Deletes the last line of a multi-line input.\",\n      help = \"Deletes the last line of a multi-line input.\\n\" ..\n      \"Useful if you make an error and you want to try again.\\n\" ..\n      \"Usage:\\n\" ..\n      \"  $$#mlback\"\n    },\n    mlrun = {\n      func = function()\n        if REPL.currentcommand == \"\" then\n          log(\"There is no current Multi-line input!\")\n        else\n          REPL()\n        end\n      end,\n      desc = \"Run the current Multi-line input as is.\",\n      help = \"Run the current Multi-line input as is.\\n\" ..\n      \"Useful if you accidentally start a new line instead of running the input.\\n\" ..\n      \"Usage:\\n\" .. \n      \"  $$#mlrun\"\n    },\n    mlprint = {\n      func = function()\n        if REPL.currentcommand == \"\" then\n          log(\"There is no current Multi-line input!\")\n        else\n          log(('[{\"text\":\"Current input:\\n\",\"italic\":false},{\"text\":\"%s\",\"color\":\"%s\"}]'):format(\n            REPL.currentcommand:gsub(\"([\\\\\\\"])\", \"\\\\%1\"),\n            rtr.user_input\n          ), true)\n        end\n      end,\n      desc = \"Prints the current Multi-line input to chat.\",\n      help = \"Prints the current Multi-line input to chat.\\n\" ..\n      \"Useful if you forgot where you were in your multi-line input.\\n\" ..\n      \"Usage:\\n\" .. \n      \"  $$#mlprint\"\n    },\n    sync = {\n      func = function(ccmd)\n        if #ccmd > 0 then\n          ping.REPLSync(ccmd)\n        end\n      end\n    },\n    set = {\n      func = function(args)\n        local cat, set, val = args:match(\"^([^.]*)%.?(%S*) ?(.*)$\")\n        if cat == \"\" then\n          local options = {}\n          for k in pairs(repl_theme) do\n            if k ~= \"\" then options[#options+1] = k end\n          end\n          table.sort(options)\n          local strs = {}\n          for _,k in ipairs(options) do\n            strs[#strs+1] = k\n          end\n          log(\"Categories:\\n\" .. table.concat(strs, \", \"))\n        elseif not repl_theme[cat] then\n          log((\"Theme category [%s] not found.\\nUse \\\"$$#set\\\" to list all categories.\"):format(cat))\n        elseif set == \"\" then\n          local tcat = repl_theme[cat]\n          local options = {}\n          for k in pairs(tcat) do\n            if k ~= \"\" then options[#options+1] = k end\n          end\n          table.sort(options)\n          local strs = {}\n          for _,k in ipairs(options) do\n            local v = tcat[k]\n            strs[#strs+1] = (\"[%s] - %s\"):format(\n              k,\n              (type(v) == \"string\" and not v:match(\"^#%x%x%x%x%x%x$\"))\n                and ('\"' .. tostring(v):gsub(\"([\\\\\\\"])\", \"\\\\%1\") .. '\"')\n                  or tostring(v)\n            )\n          end\n          log(\"Settings for category:\\n[\" .. cat .. \"]:\\n  \" .. table.concat(strs, \"\\n  \"))\n        elseif repl_theme[cat][set] == nil then\n          log((\"Theme setting [%s.%s] not found.\\nUse \\\"$$#set %s\\\" to list all settings in this category.\"):format(\n            cat, set,\n            cat\n          ))\n        elseif val == \"\" then\n          local tset = repl_theme[cat][set]\n          local tsett = type(tset)\n          log((\"Value for setting:\\n[%s.%s]:\\n  %s\"):format(\n            cat, set,\n            (tsett == \"string\" and not tset:match(\"^#%x%x%x%x%x%x$\"))\n              and ('\"' .. tostring(tset):gsub(\"([\\\\\\\"])\", \"\\\\%1\") .. '\"')\n                or (tsett == \"number\" and math.abs(tset) == math.huge)\n                    and (tset < 0 and \"-Infinity\" or \"Infinity\")\n                      or tostring(tset)\n          ))\n        else\n          ---@type string|number|boolean\n          local value\n          if val:match(\"^\\\".+\\\"$\") then\n            value = val:sub(2,-2)\n          elseif val:match(\"^#%x%x%x%x%x%x$\") then\n            value = val\n          elseif tonumber(val) then\n            value = tonumber(val)\n          elseif val == \"true\" or val == \"false\" then\n            value = val == \"true\"\n          elseif val:match(\"^%-?[Ii]nfinity$\") or val:match(\"^%-?[Ii]nf$\") then\n            local m = val:sub(1,1) == \"-\"\n            value = m and -math.huge or math.huge\n          else\n            log(\"Invalid value. Please do \\\"$$#help set\\\" to see what values can be used.\")\n            return\n          end\n          repl_theme[cat][set] = value\n        end\n      end,\n      desc = \"Quickly set REPL theme settings.\",\n      help = \"Quickly set REPL theme settings.\\n\" ..\n      \"Please make sure you are using sane values. The resulting value is not checked.\\n\" ..\n      \"Usage:\\n\" ..\n      \"  $$#set - View all categories.\\n\" ..\n      \"  $$#set <category> - View all settings in the category.\\n\" ..\n      \"  $$#set <category.setting> - View the current value for this setting.\\n\" ..\n      \"  $$#set <category.setting> <value> - Sets the setting to the given value.\\n\" ..\n      \"    <value> can be:\\n\" ..\n      \"      {string} (\\\"string\\\"),\\n\" ..\n      \"      {number} (123.45),\\n\" ..\n      \"      {boolean} (true/false)\"\n    }\n  }\n\n  local RSABlCSt, RSABlCStT, RSABlCStH = false, \"\", \"\" if loadSecrets then\n    --[[\n      I see you are poking around...\n\n      Everything in this block is part of the \"REPL Secret\" and is for fun.\n      If you ruin the fun and cheat to view these then I will be disappointed in you :(\n\n      If you *really* want a hint to one of them, mention GrandpaScout with the message\n      \"I need a REPL moment.\" in the general chat of whatever Discord server is hosting Figura.\n      You will get a reply as soon as the message is recieved. The reply will have a warning and\n      will be spoilered to avoid spoiling it for others.\n    ]]--\n\n    local function RSASt2Sc(a)\n      ---@diagnostic disable-next-line: deprecated\n      return loadstring(\"return \".. loadstring(([[return(%s):gsub(\"(%%d%%d%%d)\",function(a)return _G[\"\\115\\116\\114\\105\\110\\103\"][\"\\99\\104\\97\\114\"](_G[\"\\116\\111\\110\\117\\109\\98\\101\\114\"](a))end)]]):format(a))())()\n    end\n    RSABlCSt = RSASt2Sc[[(0 ..0x1EF6BAD164A9 ..0x9EB5E76D48F ..0x3BE5BEF1E60 ..0x931D9C4F0FF ..0x24F8D26F541A ..0x3DF25A8612EC ..0x98F37246B83 ..0x6C7D92)]]\n    RSABlCStT = RSASt2Sc[[(0 ..0x1EFD07B8A344 ..0x93226C12A77 ..0x40AF269AE82A ..0x5A25443C9646 ..0xA76E7ABBE7B ..0x4)]]\n    RSABlCStH = RSASt2Sc[[(0 ..0x319C4710DF4 ..0x4998C482275A ..0x630D54ECBA1 ..0x12A095FD6C98 ..0xBBA2)]]\n\n    local a = RSASt2Sc[[(\n        0x0B3231CBD021 ..0x526905BAC99C ..0x00E6C5CD67E7 ..0x0921A115728F ..0x095F167E326F\n      ..0x256F8B738488 ..0x1EF9C105B2BE ..0x0AA6D8708B36 ..0x37FFC3C02FD8 ..0x1F0351679E0F\n      ..0x0A5F0FF3BF8B ..0x2E1CAD3F0564 ..0x3C13A2D6FE82 ..0x098F6CC348DA ..0x2E601D23269C\n      ..0x08D4F9787560 ..0x2DD4705871B5 ..0x0F8DA57AE936 ..0x091955403431 ..0x12A095FD6C98\n      ..0x045F43E24636 ..0x496349555AA0 ..0x085F29620443 ..0x2539E689E835 ..0x00000104F145\n    )]]\n    REPLSuperActions[RSASt2Sc[[(0 ..0x1F0315CCDFC6 ..0x643B6EA)]]] = a\n    REPLSuperActions[RSASt2Sc[[(0 ..0x1F0315BDB4FD ..0x1D8CA)]]] = a\n    REPLSuperActions[RSASt2Sc[[(0 ..0x1F047A97F46A ..0xAA6C6738BDF ..0xFC2)]]] = a\n\n    REPLSuperActions[RSASt2Sc[[(0 ..0x1F047AD4F98C ..0x1B5A2)]]] = RSASt2Sc[[(\n        0x0B3231CBD021 ..0x526905BAC99C ..0x00E6C5CD67E7 ..0x0921A115728F ..0x095F167E326F\n      ..0x256F8B738488 ..0x0318F9B3C707 ..0x096309D1B6DE ..0x1D2BD5A43A75 ..0x0B01FF8B9727\n      ..0x03AACC21F4F4 ..0x09D52E028E0C ..0x24B09E71EFA9 ..0x0102C4CE21EB ..0x24B2D7A235E2\n      ..0x04A4A5F8F2EC ..0x03AB436705C1 ..0x09D5049A462D ..0x075E6A9EBC93 ..0x09328033F89B\n      ..0x058F8DC725F1 ..0x09322728DDB9 ..0x0967AEE45498 ..0x045FBAF1B627 ..0x1BE76712F45C\n      ..0x085F29620449 ..0x12A073723033 ..0x0EA7DC39C645\n    )]]\n\n    REPLSuperActions[RSASt2Sc[[(0 ..0x1F0351C34AC9 ..0x18AAA)]]] = RSASt2Sc[[(\n        0x0B3231CBD021 ..0x526905BAC99C ..0x00E6C5CD67E7 ..0x0921A115728F ..0x095F167E326F\n      ..0x256F8B738488 ..0x0318F9B3C76A ..0x2DE00D6584B4 ..0x08D4DB95B5F6 ..0x401553900D14\n      ..0x09039C3D3DE7 ..0x24B085F6127E ..0x045EBABED2C9 ..0x0669EDFBF082 ..0x098F6CC348DA\n      ..0x2E601D23269C ..0x08D4F9787560 ..0x2DD4705871B5 ..0x0F8DA57AE936 ..0x091955403431\n      ..0x12A095FD6C98 ..0x045F43E24636 ..0x496349555AA0 ..0x085F29620443 ..0x2539E689E835\n      ..0x00000104F145\n    )]]\n\n    a = RSASt2Sc[[(\n        0x0B3231CBD021 ..0x526905BAC99C ..0x00E6C5CD67E7 ..0x0921A115728F ..0x095F167E326F\n      ..0x256F8B738488 ..0x1EF9C1060C97 ..0x0AA4DDBC283F ..0x49ADE03DDEFC ..0x58510B785A74\n      ..0x0A192ADEE53F ..0x06789D11CEAD ..0x09309D5D23C3 ..0x492DA202AD14 ..0x09039C3D3DE7\n      ..0x24B085F6127E ..0x04BC4DDD3629 ..0x03AFE7425482 ..0x098F6CC348DA ..0x2E601D23269C\n      ..0x08D4F9787560 ..0x2DD4705871B5 ..0x0F8DA57AE936 ..0x091955403431 ..0x12A095FD6C98\n      ..0x045F43E24636 ..0x496349555AA0 ..0x085F29620443 ..0x2539E689E835 ..0x00000104F145\n    )]]\n    REPLSuperActions[RSASt2Sc[[(0 ..0x1F065843EBC8 ..0xA77F9EE04FB ..0x16BA79CB2)]]] = a\n    REPLSuperActions[RSASt2Sc[[(0 ..0x1F065843EBC8 ..0xA77F9EE04FB ..0x58C86BD53DA)]]] = a\n\n    a = RSASt2Sc[[(\n        (0x0B3231CBD021 ..0x526905BAC99C ..0x00E6C5CD67E7 ..0x0921A115728F ..0x095F167E326F\n      ..0x256F8B738488 ..0x004F4C2B94B9 ..0x0927B29E72B8 ..0x0A8F4258B5A2 ..0x40B5F99E5396\n      ..0x1D359CF9FCA8 ..0x093227415F8F ..0x03BAD88F4BD9 ..0x0960E1E54627 ..0x1312B7069280\n      ..0x3C1FFDA52053 ..0x0AD545908417 ..0x0493A07AE0C5 ..0x09EC94A89ECF ..0x37ABA370E8B7\n      ..0x0CC31A671095 ..0x0A6116DBD22A ..0x2E79E2C4ADF9 ..0x09294F8018A1 ..0x0ABDC101B39E\n      ..0x0103D8B25B08 ..0x09D528777C0B ..0x0100963B66CA ..0x0931D9C4D60B ..0x01E933FB41AC\n      ..0x09309D5D2DE7 ..0x132C54246601 ..0x0A18E4AE4540 ..0x098F0779E887 ..0x02C1F75E606D\n      ..0x001927372A29 ..0x091AA8A55EE7 ..0x01EAD46133EC ..0x098F49090CEA ..0x2E77941DDCEF\n      ..0x0E94C449A790 ..0x00FE054A7CF9 ..0x092DC0A2F420 ..0x0A1B259F98E7 ..0x40B87F163209\n      ..0x0101775D7E7B ..0x01D9210E2115 ..0x09ECAC09112A ..0x01020063F0A0 ..0x094975AAFEC9\n      ..0x40A5E123574B ..0x0DABEFF0F2C9 ..0x098F49090CEB ..0x378437C7CA84 ..0x1D32D14DE7F4\n      ..0x0932450EA80B ..0x058ED5E5D4A5 ..0x09D5168FBE8B ..0x0A26A1E281C5 ..0x015E45C6D07B\n      ..0x01D920B2B6B1 ..0x0960827C8BAF ..0x131E5BDCBFE0 ..0x09039C404CB7 ..0x3773F0D38679\n      ..0x1320EADB2301 ..0x0A0389363985 ..0x4090E5927D03 ..0x00034460CF56 ..0x09190DE47A4D\n      ..0x52D421A51444 ..0x1D359CFA0C96 ..0x0960D57C6D86 ..0x04A72F903F46 ..0x098F1F6562B1\n      ..0x4010CE147020 ..0x1D2AE766AA55 ..0x093244C6FE4F ..0x131E5BDCBFE1 ..0x0EA3E659D556\n      ..0x095EE744A18E ..0x52C5FDDC5883 ..0x0E94C4498850 ..0x0A8F425ECE2F ..0x24ABF6F09BCA\n      ..0x1D359D63BF30 ..0x001A918D7B19 ..0x091AA8A560E3 ..0x0103617D1188 ..0x093056460A3F\n      ..0x01EC3AD79B15 ..0x09190DE47D6E ..0x409EB84AD00C ..0x1D220C37D0B1 ..0x09EC4D20890F\n      ..0x377D43F1357D ..0x0A1BAFEF6754 ..0x0AD4F228E78F ..0x01E8809231D6 ..0x095EE727872B)..\n        (0x2E6E418DA17A ..0x02EB51AF40D3 ..0x1317634C9DBB ..0x0A1C67B14229 ..0x0A0377C3F9C2\n      ..0x2E62A2ADC9C8 ..0x1D3130D88840 ..0x094975AAFECB ..0x0677EA332C5C ..0x098F49090CEB\n      ..0x378437BCA5DC ..0x078E0E18161B ..0x09FF139C4BCE ..0x03BBA1DA607B ..0x127B495C1D83\n      ..0x0CD57F94E666 ..0x0A1B133DC452 ..0x0A0D08F387B0 ..0x08D3346EFC8E ..0x075C131CAD33\n      ..0x00F2637C0F00 ..0x008BD13625D9 ..0x091FC3B55529 ..0x0A03DD11CC59 ..0x2DC446968B64\n      ..0x1D33FB53BEA1 ..0x0A038936385A ..0x03BAD88F4BD9 ..0x0960E1E54627 ..0x131C0D2E7733\n      ..0x00178D128D67 ..0x000255F5A756 ..0x09190D939F79 ..0x40AA7D457155 ..0x0019E1ADB859\n      ..0x091FC3B568B1 ..0x09EC2365DCFF ..0x2DC446968B64 ..0x1D3130BA4E39 ..0x0B03EDD8BB91\n      ..0x40A828AC8FDB ..0x001785E05BD7 ..0x000255F5A756 ..0x09190DD84A5C ..0x2537AFA5FE41\n      ..0x0EA58738B0B0 ..0x09322D31273A ..0x096316ECF856 ..0x1D356225BB30 ..0x0A1B13BDD70B\n      ..0x52CD20BEFB00 ..0x06A4693D09E0 ..0x2537AFA5FE41 ..0x0EA58738B0B0 ..0x09322D31273A\n      ..0x096316ECF856 ..0x1D3561D944F6 ..0x09190DDFE92A ..0x01014DEDE7F4 ..0x098F43101EAA\n      ..0x03BADD178B50 ..0x098F49090CEB ..0x0A26A1E281C5 ..0x015E45C6D07B ..0x127B6395D472\n      ..0x1D34AE613548 ..0x09D4EC5CA786 ..0x2563BE16E3B5 ..0x1320EBCF46B8 ..0x09EC1D6E7557\n      ..0x133353413073 ..0x0CD669798C41 ..0x0AA684E45139 ..0x01EB47B5B174 ..0x0977CA8104CA\n      ..0x0A1B026CD2B2 ..0x02EBC2E5CAEF ..0x057C75B85093 ..0x09305656D12A ..0x0962F7566B8B\n      ..0x092F62683BCA ..0x09BDF7580BF6 ..0x0A220222F4C4 ..0x1D312C325135 ..0x0A8F89E55DAB\n      ..0x01EBC373EE4B ..0x09309DB8C07B ..0x127B6395D472 ..0x1D3130401531 ..0x010061AC794B\n      ..0x092F98D37A37 ..0x091AA9227E2F ..0x37948BDC2E71 ..0x0A18E4AE3988 ..0x0930560A8779\n      ..0x40AA7D52B847 ..0x0CD491948E33 ..0x09323F1BEF3F ..0x24C7E2BC9020 ..0x1D3130D88840)..\n        (0x0A1ACBB738B7 ..0x0A28FBE66922 ..0x1D2F8ED6CC54 ..0x0109A7234680 ..0x06607895CF9C\n      ..0x24ABD7F58B7C ..0x2D85A64E0844 ..0x093256E7447E ..0x075FCD15984F ..0x09EC70D924FB\n      ..0x0A1D2DE523CB ..0x092F98D34B56 ..0x0B01FF8B997F ..0x37A284216390 ..0x3C1FFDA52053\n      ..0x0AD545908417 ..0x0493A089FBFE ..0x09321B4DFF2A ..0x0A22004EA97D ..0x0A1BAFEFBD47\n      ..0x0A60C358BDA2 ..0x1B93AF0E6BA1 ..0x0EA58738B086 ..0x098F1F6562B1 ..0x3FF4E7A7E858\n      ..0x006B5109DA79 ..0x00EA58BB390F ..0x52BCE2B9B468 ..0x004AC87A57F3 ..0x091FC898EB7F\n      ..0x0A60B77DC0FA ..0x1B982F2B39FF ..0x0102A1806FEB ..0x24E858C57E42 ..0x05EAF5D4245E\n      ..0x36E11A831A3B ..0x0176CA3DB58D ..0x083767D2F551 ..0x09D5403840F7 ..0x0839BF540AC5\n      ..0x00178684D936 ..0x091955403431 ..0x12A095FD6C98 ..0x045F43E24636 ..0x496349555AA0\n      ..0x085F29620443 ..0x2539E689E835 ..0x00000104F145)\n    )]]\n    REPLSuperActions[RSASt2Sc[[(0 ..0x1F0403DC5B0D ..0x6CCFB8A)]]] = a\n    REPLSuperActions[RSASt2Sc[[(0 ..0x31A0062D5E7 ..0x6C4ACA)]]] = a\n    REPLSuperActions[RSASt2Sc[[(0 ..0x4F640E638B ..0x92F62683BCA ..0x662721A)]]] = a\n  end\n  REPLSuperActions.help = {\n    func = function(arg)\n      local SA = REPLSuperActions[arg]\n      if SA and not SA[RSABlCStH] then\n        log(string.format('{\"text\":\"Help for [%s]:\\n%s\\n\",\"italic\":false}',\n          arg == \"\" and \"help\" or arg,\n          SA.help\n            and string.gsub(SA.help, \"([\\\\\\\"])\", \"\\\\%1\")\n              or string.format(\"No help found for this SuperAction.\\nAssumed usage:\\n  $$#%s - Run SuperAction\", arg)\n        ), true)\n      else\n        log(\"No SuperAction with that name found.\")\n      end\n    end,\n    desc = \"Provides help about SuperActions.\",\n    help = \"Provides help about SuperActions.\\n\" ..\n    \"Usage:\\n\" ..\n    \"  $$#help - Get help about the help SuperAction.\\n\" ..\n    \"  $$#help <name> - Get help about the named SuperAction.\"\n  }\n  REPLSuperActions[\"\"] = {\n    func = function(arg)\n      local a = arg == RSABlCSt\n      local topics = {}\n      for k in pairs(REPLSuperActions) do\n        topics[#topics+1] = k\n      end\n      table.sort(topics)\n      local strs = {}\n      for _,k in ipairs(topics) do\n        v = REPLSuperActions[k]\n        if not v[RSABlCStH] then\n          strs[#strs+1] = string.format(\"[$$#%s]: %s\", k, v.desc or \"No description provided...\")\n        end\n      end\n      log(\"All SuperActions:\\n\" .. table.concat(strs, \"\\n\") .. \"\\n\")\n      if a then\n        local astrs = {}\n        for _,k in ipairs(topics) do\n          if REPLSuperActions[k][RSABlCStH] then\n            astrs[#astrs+1] = string.format(\"@ [$$#%s]\", k)\n          end\n        end\n        log(RSABlCStT .. table.concat(astrs, \"\\n\") .. \"\\n\")\n      end\n    end,\n    desc = \"List all SuperActions.\",\n    --\"What? That's not what this SA does!\"\n    --If this were to be typed out in chat, it would look like \"$$#help\".\n    --Therefore, this is actually the help topic for the help SA.\n    help = \"Provides help about SuperActions.\\n\" ..\n    \"Usage:\\n\" ..\n    \"  $$#help - Get help about the help SuperAction.\\n\" ..\n    \"  $$#help <name> - Get help about the named SuperAction.\\n\\n\" ..\n    \"If you were looking for a list of SuperActions, try \\\"$$#\\\".\"\n  }\n  local REPLmt = {\n    __call = function(self, cmd)\n      local str, nl\n      if cmd ~= nil then\n        cmd = tostring(cmd)\n        if string.sub(cmd, 1, 3) == \"$$#\" then\n          --Assume the worst, the code in this block should *all* run even if the string metatable is fucked.\n          local SAcmd, SAarg = string.match(cmd, \"^$$#(%S*) ?(.*)$\")\n          SAcmd = string.lower(SAcmd)\n          if REPLSuperActions[SAcmd] then\n            log(string.format('{\"text\":\"REPL: Running SuperAction.\",\"color\":\"%s\",\"italic\":false}', rtr.notice), true)\n            local ret = REPLSuperActions[SAcmd].func(SAarg)\n            if ret == \"\\0\\9\\0\\70\\79\\82\\67\\69\\0\\9\\0\" then\n              return \"\\0\\9\\0\\70\\79\\82\\67\\69\\0\\9\\0\"\n            end\n          else\n            log(string.format('{\"text\":\"REPL: SuperAction not found!\\nUse $$# to list all valid SuperActions.\",\"color\":\"%s\",\"italic\":false}', rtr.error), true)\n          end\n          return\n        end\n        str, nl = cmd:match(\"^(.-)(;?)$\")\n        if not str then error \"Command error.\" end\n        if #REPL.currentcommand == 0 and str:sub(1,1) == \"/\" then\n          log(('{\"text\":\"REPL: Ignoring Minecraft command.\",\"color\":\"%s\",\"italic\":false}'):format(rtr.notice), true)\n          chat.setFiguraCommandPrefix()\n          chat.sendMessage(str)\n          chat.setFiguraCommandPrefix(\"\")\n          return\n        end\n        REPL.currentcommand = REPL.currentcommand .. str .. \"\\n\"\n      else\n        str = \"\"\n      end\n      if nl ~= \";\" then\n        chat.setFiguraCommandPrefix()\n        local ccmd = REPL.currentcommand:sub(1, -2)\n        REPL.currentcommand = \"\"\n        ---@diagnostic disable-next-line: deprecated\n        local f = loadstring(\"return \" .. ccmd)\n        if type(f) == \"function\" then\n          log(('[{\"text\":\"INPUT:\\n\",\"color\":\"%s\",\"italic\":false},{\"text\":\"return \",\"color\":\"%s\"},{\"text\":\"%s\\n\",\"color\":\"%s\"}]'):format(\n            rtr.input,\n            rtr.repl_return,\n            ccmd:gsub(\"([\\\\\\\"])\", \"\\\\%1\"), rtr.user_input\n          ), true)\n        else\n          ---@diagnostic disable-next-line: deprecated\n          f = loadstring(ccmd)\n          if type(f) == \"function\" then\n            log(('[{\"text\":\"INPUT:\\n\",\"color\":\"%s\",\"italic\":false},{\"text\":\"%s\\n\",\"color\":\"%s\"}]'):format(\n              rtr.input,\n              ccmd:gsub(\"([\\\\\\\"])\", \"\\\\%1\"), rtr.user_input\n            ), true)\n          else\n            log(('{\"text\":\"REPL: Compile Error!\\n%s\",\"color\":\"%s\",\"italic\":false}'):format(\n              f:gsub(\"\\t\", \"  \"):gsub(\"([\\\\\\\"])\", \"\\\\%1\"), rtr.error\n            ), true)\n            chat.setFiguraCommandPrefix(\"\")\n            return\n          end\n        end\n        local r = {pcall(f)}\n        if not r[1] then\n          log(('{\"text\":\"REPL: Runtime Error!\\n%s\",\"color\":\"%s\",\"italic\":false}'):format(\n            r[2]:gsub(\"\\t\", \"  \"):gsub(\"([\\\\\\\"])\", \"\\\\%1\"):gsub(\"§.\", \"\"), rtr.error\n          ), true)\n          chat.setFiguraCommandPrefix(\"\")\n          return\n        end\n        table.remove(r, 1)\n        local _H = {}\n        H[#H+1] = _H\n        local rh = 0\n        for i in pairs(r) do if i > rh then rh = i end end\n        for i=1,rh do\n          local v = r[i]\n          _H[i] = v\n          r[i] = JSON.stringify.any(v, true, false, {\n            indent = rtt.max_indent < 0 and rtt.max_indent or nil,\n            length = type(v) == \"string\" and rts.max_size or rtt.max_length\n          })\n        end\n        if rh == 0 then\n          r[1] = ('%s,{\"text\":\" (no value?)\",\"color\":\"%s\"}'):format(\n            JSON.stringify[\"nil\"](),\n            rtx.no_value\n          )\n        end\n        log(('[{\"text\":\"RETURNS:\\n\",\"color\":\"%s\",\"italic\":false}%s,\"\\n\"]'):format(\n          rtr.returns,\n          table.concat(r, ',\"\\n\"')\n        ), true)\n        chat.setFiguraCommandPrefix(\"\")\n      end\n    end\n  }\n\n  --Store pointer to the Environment.\n  --[[ O[1]  ]] O[_ENV] = true\n\n  --Store pointers to REPL values.\n  --[[ O[2]  ]] O[REPL] = true\n  --[[ O[3]  ]] O[REPL.key] = true\n  --[[ O[4]  ]] O[REPL.log] = true\n  --[[ O[5]  ]] O[REPL.stringify] = true\n  --[[ O[6]  ]] O[REPL.theme] = true\n\n  --Store pointer to REPL metatable.\n  --[[ O[7]  ]] O[REPLmt] = true\n\n  --Store pointers to O values.\n  --[[ O[8]  ]] O[O] = true\n  --[[ O[9]  ]] O[O.N] = true\n  --[[ O[10] ]] O[O.Nindex] = true\n\n  --Store pointers to instances.\n  REPLINSTANCE_Biome = biome.getBiome(\"minecraft:plains\", {})\n  --[[ O[11] ]] O[REPLINSTANCE_Biome] = true\n\n  REPLINSTANCE_BlockState = block_state.createBlock(\"minecraft:chest\")\n  --[[ O[12] ]] O[REPLINSTANCE_BlockState] = true\n\n  REPLINSTANCE_ItemStack = item_stack.createItem(\"minecraft:shield\")\n  --[[ O[13] ]] O[REPLINSTANCE_ItemStack] = true\n\n  REPLINSTANCE_FiguraKeybind = keybind.newKey(\"[REPL] <INTERNAL USE>\", \"UNKNOWN\")\n  --[[ O[14] ]] O[REPLINSTANCE_FiguraKeybind] = true\n\n  REPLINSTANCE_RegisteredKeybind = keybind.getRegisteredKeybind(\"key.jump\")\n  --[[ O[15] ]] O[REPLINSTANCE_RegisteredKeybind] = true\n\n  REPLINSTANCE_Vector = vectors.of{1,2,3,4,5,6}\n  --[[ O[16] ]] O[REPLINSTANCE_Vector] = true\n\n  ---@type {[boolean]: number, [number]: string, [string]: table, [table]: Vector, [Vector]: userdata, [userdata]: boolean}\n  REPL.testtable = {\n    [true] = 123.456,\n    [123.456] = \"\\abcxyz\",\n    [\"qwer\\ty\"] = {\"hello\", \"world\", {\"!\"}},\n    [{\"foo\",\"bar\",\"baz\",yalike=\"jazz?\"}] = vectors.of{1,2,3,4,5,math.sqrt(2)},\n    [vectors.of{1,2,3,4,5,math.sqrt(2)}] = REPLINSTANCE_BlockState[\"figura$block_state\"],\n    [REPLINSTANCE_ItemStack[\"figura$item_stack\"]] = false\n  }\n\n  function REPL.tick()\n    local REPLkeyIP = REPL.key.isPressed()\n    if REPLkeyIP and not REPL.keyWP then\n      if REPL.bound then\n        REPL.bound = false\n        chat.setFiguraCommandPrefix()\n        log(string.format('{\"text\":\"REPL: Unbound from chat.\",\"color\":\"%s\",\"italic\":false}', rtr.notice), true)\n      else\n        REPL.bound = true\n        chat.setFiguraCommandPrefix(\"\")\n        log(string.format('{\"text\":\"REPL: Bound to chat.\",\"color\":\"%s\",\"italic\":false}', rtr.notice), true)\n      end\n    end\n    REPL.keyWP = REPLkeyIP\n  end\n\n  function REPL.onCommand(cmd)\n    if REPL.bound then\n      local s, e = pcall(REPLmt.__call, nil, cmd)\n      if not s then\n        --Again, we have to assume the worst.\n        log(\n          string.format(\n            '{\"text\":\"REPL: Critical REPL error!\\n%s\",\"color\":\"%s\",\"italic\":\"false\"}',\n            string.gsub(string.gsub(string.gsub(e, \"\\t\", \"  \"), \"([\\\\\\\"])\", \"\\\\%1\"), \"§.\", \"\"),\n            rtr.error\n          ),\n          true\n        )\n\n        if not checkSMT() then\n          log('{\"text\":\"\\nThe string metatable has been tampered with!\\nCore REPL functions cannot run without a valid string metatable!\\nYou can use \\\\\"$$#fixstringmt\\\\\" to attempt to fix the issue.\",\"color\":\"dark_red\",\"italic\":false}', true)\n        end\n        chat.setFiguraCommandPrefix(\"\")\n      elseif e == \"\\0\\9\\0\\70\\79\\82\\67\\69\\0\\9\\0\" then\n        error(\"FORCED AVATAR ERROR.\\nRELOAD AVATAR TO REGAIN CONTROL.\\n\")\n      end\n    end\n  end\n\n  setmetatable(REPL, REPLmt)\n\n  function onCommand(cmd) REPL.onCommand(cmd) end\n  function tick() REPL.tick() end\nend\n\nfunction ping.REPLSync(ccmd)\n  ---@diagnostic disable-next-line: deprecated\n  local f = loadstring(\"return \" .. ccmd)\n  if type(f) ~= \"function\" then\n    ---@diagnostic disable-next-line: deprecated\n    f = loadstring(ccmd)\n    if type(f) ~= \"function\" then\n      log(\"REPLSync Compile error:\\n\" .. f)\n      return\n    end\n  end\n  local r = {pcall(f)}\n  if not r[1] then\n    log(\"REPLSync Runtime Error:\\n\" .. r[2])\n    return\n  end\nend\n"}